// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Session extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Session entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Session entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Session", id.toString(), this);
  }

  static load(id: string): Session | null {
    return store.get("Session", id) as Session | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get stakingToken(): Bytes {
    let value = this.get("stakingToken");
    return value.toBytes();
  }

  set stakingToken(value: Bytes) {
    this.set("stakingToken", Value.fromBytes(value));
  }

  get totalReward(): BigInt {
    let value = this.get("totalReward");
    return value.toBigInt();
  }

  set totalReward(value: BigInt) {
    this.set("totalReward", Value.fromBigInt(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    return value.toBigInt();
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get generation(): BigInt {
    let value = this.get("generation");
    return value.toBigInt();
  }

  set generation(value: BigInt) {
    this.set("generation", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get rewardUnit(): BigInt {
    let value = this.get("rewardUnit");
    return value.toBigInt();
  }

  set rewardUnit(value: BigInt) {
    this.set("rewardUnit", Value.fromBigInt(value));
  }

  get interestPerToken(): BigInt {
    let value = this.get("interestPerToken");
    return value.toBigInt();
  }

  set interestPerToken(value: BigInt) {
    this.set("interestPerToken", Value.fromBigInt(value));
  }

  get claimedPerToken(): BigInt {
    let value = this.get("claimedPerToken");
    return value.toBigInt();
  }

  set claimedPerToken(value: BigInt) {
    this.set("claimedPerToken", Value.fromBigInt(value));
  }

  get lastInterestUpdate(): BigInt {
    let value = this.get("lastInterestUpdate");
    return value.toBigInt();
  }

  set lastInterestUpdate(value: BigInt) {
    this.set("lastInterestUpdate", Value.fromBigInt(value));
  }
}

export class Balance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Balance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Balance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Balance", id.toString(), this);
  }

  static load(id: string): Balance | null {
    return store.get("Balance", id) as Balance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get minted(): boolean {
    let value = this.get("minted");
    return value.toBoolean();
  }

  set minted(value: boolean) {
    this.set("minted", Value.fromBoolean(value));
  }

  get session(): string | null {
    let value = this.get("session");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set session(value: string | null) {
    if (value === null) {
      this.unset("session");
    } else {
      this.set("session", Value.fromString(value as string));
    }
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }

  get claimedReward(): BigInt {
    let value = this.get("claimedReward");
    return value.toBigInt();
  }

  set claimedReward(value: BigInt) {
    this.set("claimedReward", Value.fromBigInt(value));
  }

  get claimedTime(): BigInt {
    let value = this.get("claimedTime");
    return value.toBigInt();
  }

  set claimedTime(value: BigInt) {
    this.set("claimedTime", Value.fromBigInt(value));
  }

  get unpaidReward(): BigInt {
    let value = this.get("unpaidReward");
    return value.toBigInt();
  }

  set unpaidReward(value: BigInt) {
    this.set("unpaidReward", Value.fromBigInt(value));
  }
}
