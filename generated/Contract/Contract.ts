// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sessionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get claimedTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sessionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FactorySet extends ethereum.Event {
  get params(): FactorySet__Params {
    return new FactorySet__Params(this);
  }
}

export class FactorySet__Params {
  _event: FactorySet;

  constructor(event: FactorySet) {
    this._event = event;
  }

  get factoryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SessionStarted extends ethereum.Event {
  get params(): SessionStarted__Params {
    return new SessionStarted__Params(this);
  }
}

export class SessionStarted__Params {
  _event: SessionStarted;

  constructor(event: SessionStarted) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sessionIdd(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get generation(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sessionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Contract__balancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract__sessionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  CWS(): Address {
    let result = super.call("CWS", "CWS():(address)", []);

    return result[0].toAddress();
  }

  try_CWS(): ethereum.CallResult<Address> {
    let result = super.tryCall("CWS", "CWS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balances(param0: BigInt, param1: Address): Contract__balancesResult {
    let result = super.call(
      "balances",
      "balances(uint256,address):(uint256,uint256,uint256,bool,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new Contract__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_balances(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Contract__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(uint256,address):(uint256,uint256,uint256,bool,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__balancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  depositTimes(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "depositTimes",
      "depositTimes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositTimes(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositTimes",
      "depositTimes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSessionIds(param0: Address): BigInt {
    let result = super.call(
      "lastSessionIds",
      "lastSessionIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastSessionIds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSessionIds",
      "lastSessionIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sessions(param0: BigInt): Contract__sessionsResult {
    let result = super.call(
      "sessions",
      "sessions(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__sessionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_sessions(param0: BigInt): ethereum.CallResult<Contract__sessionsResult> {
    let result = super.tryCall(
      "sessions",
      "sessions(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__sessionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  claim(_sessionId: BigInt): boolean {
    let result = super.call("claim", "claim(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_sessionId)
    ]);

    return result[0].toBoolean();
  }

  try_claim(_sessionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("claim", "claim(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_sessionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakedBalanceOf(_sessionId: BigInt, _owner: Address): BigInt {
    let result = super.call(
      "stakedBalanceOf",
      "stakedBalanceOf(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_sessionId),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_stakedBalanceOf(
    _sessionId: BigInt,
    _owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedBalanceOf",
      "stakedBalanceOf(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_sessionId),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(_sessionId: BigInt, _owner: Address): BigInt {
    let result = super.call("earned", "earned(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_sessionId),
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_earned(_sessionId: BigInt, _owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_sessionId),
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable(_sessionId: BigInt, _owner: Address): BigInt {
    let result = super.call(
      "claimable",
      "claimable(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_sessionId),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimable(
    _sessionId: BigInt,
    _owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimable",
      "claimable(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_sessionId),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedBalance(_sessionId: BigInt): BigInt {
    let result = super.call(
      "stakedBalance",
      "stakedBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sessionId)]
    );

    return result[0].toBigInt();
  }

  try_stakedBalance(_sessionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedBalance",
      "stakedBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sessionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _cws(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class StartSessionCall extends ethereum.Call {
  get inputs(): StartSessionCall__Inputs {
    return new StartSessionCall__Inputs(this);
  }

  get outputs(): StartSessionCall__Outputs {
    return new StartSessionCall__Outputs(this);
  }
}

export class StartSessionCall__Inputs {
  _call: StartSessionCall;

  constructor(call: StartSessionCall) {
    this._call = call;
  }

  get _lpToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _totalReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _period(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _generation(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class StartSessionCall__Outputs {
  _call: StartSessionCall;

  constructor(call: StartSessionCall) {
    this._call = call;
  }
}

export class SetNftFactoryCall extends ethereum.Call {
  get inputs(): SetNftFactoryCall__Inputs {
    return new SetNftFactoryCall__Inputs(this);
  }

  get outputs(): SetNftFactoryCall__Outputs {
    return new SetNftFactoryCall__Outputs(this);
  }
}

export class SetNftFactoryCall__Inputs {
  _call: SetNftFactoryCall;

  constructor(call: SetNftFactoryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftFactoryCall__Outputs {
  _call: SetNftFactoryCall;

  constructor(call: SetNftFactoryCall) {
    this._call = call;
  }
}

export class PayDebtCall extends ethereum.Call {
  get inputs(): PayDebtCall__Inputs {
    return new PayDebtCall__Inputs(this);
  }

  get outputs(): PayDebtCall__Outputs {
    return new PayDebtCall__Outputs(this);
  }
}

export class PayDebtCall__Inputs {
  _call: PayDebtCall;

  constructor(call: PayDebtCall) {
    this._call = call;
  }

  get _sessionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayDebtCall__Outputs {
  _call: PayDebtCall;

  constructor(call: PayDebtCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _sessionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _sessionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _sessionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ClaimNftCall extends ethereum.Call {
  get inputs(): ClaimNftCall__Inputs {
    return new ClaimNftCall__Inputs(this);
  }

  get outputs(): ClaimNftCall__Outputs {
    return new ClaimNftCall__Outputs(this);
  }
}

export class ClaimNftCall__Inputs {
  _call: ClaimNftCall;

  constructor(call: ClaimNftCall) {
    this._call = call;
  }

  get _sessionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimNftCall__Outputs {
  _call: ClaimNftCall;

  constructor(call: ClaimNftCall) {
    this._call = call;
  }
}
